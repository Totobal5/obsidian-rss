import esbuild from "esbuild";
import fs from 'fs';
import process from "process";
import builtins from 'builtin-modules';
import sass from "sass";
import autoprefixer from "autoprefixer";
import postcss from "postcss";
import cssnano from "cssnano";
import defaultPreset from "cssnano-preset-default";
import sveltePlugin from "esbuild-svelte";
import sveltePreprocess from "svelte-preprocess";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
https://github.com/joethei/obisidian-rss
*/
`;

const prod = (process.argv[2] === 'production');

const copyMinifiedCSS = {
    name: 'minify-css',
    setup: (build) => {
        build.onEnd(async () => {
            const {css} = sass.compile('src/style/main.scss');
            let result;
            if (prod) {
                const content = `${banner}\n${css}`;
                const preset = defaultPreset({discardComments: false});
                result = await postcss([cssnano({
                    preset: preset,
                    plugins: [
                        autoprefixer,
                    ]
                })]).process(content, { from: 'src/style/main.scss' });
            } else {
                const content = `${banner}\n${css}`;
                result = await postcss([autoprefixer]).process(content, { from: 'src/style/main.scss' });
            }

            fs.writeFileSync('build/styles.css', result.css, {encoding: 'utf-8'});
        })
    }
}

const copyManifest = {
    name: 'copy-manifest',
    setup: (build) => {
        build.onEnd(() => {
            fs.copyFileSync('manifest.json', 'build/manifest.json');
        });
    },
};

// Se definen todas las opciones de compilación en un objeto.
const buildOptions = {
    banner: {
        js: banner,
    },
    entryPoints: ['src/main.ts'],
    bundle: true,
    external: ['obsidian', 'electron', ...builtins],
    plugins: [sveltePlugin({
        preprocess: sveltePreprocess()
    }), copyManifest, copyMinifiedCSS],
    format: 'cjs',
    target: 'es2016',
    logLevel: "info",
    sourcemap: prod ? false : 'inline',
    treeShaking: true,
    outfile: 'build/main.js',
};

// Se usa una lógica condicional para compilar o vigilar cambios.
if (prod) {
    // Modo producción: solo compila una vez.
    esbuild.build(buildOptions).catch(() => process.exit(1));
} else {
    // Modo desarrollo: usa el nuevo context API para el modo "watch".
    esbuild.context(buildOptions).then(ctx => {
        console.log("Watching for changes...");
        ctx.watch();
    }).catch(() => process.exit(1));
}